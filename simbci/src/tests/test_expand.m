
noiseParams = { ...
	  {'category','volume', 'SNR', loop_these([0.0500    0.1250  0.25  0.5000    0.7500 1 1.25],'volume-SNR'), ...
		'generator', @noise_bcicomp4_artifacts, 'genParams', {'eyeblinkFrequency', 0.1, ...
					 'eyeMoveFrequency',0.2, 'samplingFreq', 200}}, ...
	  {'category','surface','SNR',0.5, ...
		'generator', @noise_bcicomp4_surface, 'genParams', {'subType','fake', ...
					 'strength', [1.0 0.5, 0.3], 'samplingFreq', 200}}, ...
};

allPipelines={};
allPipelines = { allPipelines{:}, ...
	{'name','wmn-cincotti', 'processors', { ...
	  {'call', @proc_cincotti, ...
		 'forwardModel', loop_these({
			'sabre:/models/brain/surfaceLeadfield-LowRefinment.mat',...
			'sabre:/models/brain/surfaceLeadfield-MediumRefinment.mat',...
			'sabre:/models/brain/surfaceLeadfield-HighRefinment.mat'...
			},'cincotti-leadfields'), ...
		 'inverse',{'call',@wmn_inverse,'inverseParams',{} }}, ...
	  {'call', @proc_lda} } }, ...
	};
allPipelines = { allPipelines{:}, ...
	{'name','csp-bandpower-lda', 'processors', { ...
  {'call', @proc_csp_bandpower, 'logFeats',true,'freqLow',8,'freqHigh',30, ...
		   'csp_dim', 2, 'csp_tikhonov', 0.5, 'csp_shrink', 0.5}, ...
  {'call', @proc_normalize}, ...
  {'call', @proc_lda} } } ...
};

p1 = {loop_these([0,1],'param1'),loop_these([2,3,4],'param2')};
p2 = {{loop_these({'a','b'},'param1')},loop_these({'1','2','3'},'param2')};
p3 = {{'a','b'},{'c','d',loop_these([1 2 3],'param1')}};

r1 = expand_parameters(p1{:});
r2 = expand_parameters(p2{:});
r3 = expand_parameters(p3{:});
rp = expand_parameters(noiseParams{:});

% pipelines need to be expanded separately as they're independent
ap={};apIds={};
for i=1:length(allPipelines)
	tmp = allPipelines{i};
	result = expand_parameters(tmp{:});
	resultOnly = expand_parameters_only(tmp{:});
	ap = [ap;result];
	if(isempty(resultOnly))
		apIds = [apIds;{ {} }];
	else
		apIds = [apIds;resultOnly];
	end
end

print_parameters(r1);
print_parameters(r2);
print_parameters(r3);
print_parameters(rp);
print_parameters(ap);

m1 = expand_parameters_only(p1{:});
m2 = expand_parameters_only(p2{:});
m3 = expand_parameters_only(p3{:});
mp = expand_parameters_only(noiseParams{:});

print_parameters(m1);
print_parameters(m2);
print_parameters(m3);
print_parameters(mp);


