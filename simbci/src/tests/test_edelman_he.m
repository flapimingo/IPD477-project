%
% Tests Edelman/He pipeline with very simple and unrealistic data to illustrate 
% the pipeline is working
%
clear;
close all;

% setup_paths;

% Misc
set(0,'DefaultFigureColormap',feval('inferno'));

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Parameters controlling the simulation
simulationParams = {'numIterations',1,'saveFigures',false,'id','edelman-test','useCache',false};

% Setup the generating head
default_head;

% Four classes
classEvents = {'Freq1','Freq2','Freq3','Freq4'};

% Parameters controlling experiment timeline generation:  when events happen
timelineParams = { 'samplingFreq', 200, 'eventList', { ...
	  	{'when', {@when_trials, 'events',classEvents, ...
		    'numTrials',20, ... 
			'trialLengthMs',4000, 'restLengthMs', 2000, ...
			'trialOrder', 'random', 'includeRest', true}}, ...	
		{'when', {@when_always, 'events',{'noise'}}} ...
	} ...
};

% Parameters controlling the signal content
effectParams = { ...
	  {'SNR',1.0,'name','signal', 'triggeredBy',classEvents{1}, ...
	    'where', {@where_heuristic, 'position','leftMC', 'howMany', 1}, ...
		'what',  {@noise_frequency_spike, 'frequencyHz',8, 'harmonics', true}}, ...
	  {'SNR',1.0,'name','signal', 'triggeredBy',classEvents{2}, ...
	    'where', {@where_heuristic, 'position','rightMC', 'howMany', 1}, ...
		'what',  {@noise_frequency_spike, 'frequencyHz',9,  'harmonics', true}}, ...
	  {'SNR',1.0,'name','signal', 'triggeredBy',classEvents{3}, ...
	    'where', {@where_heuristic, 'position','occipital', 'howMany', 1}, ...
		'what',  {@noise_frequency_spike, 'frequencyHz',10, 'harmonics', true}}, ...	
	  {'SNR',1.0,'name','signal', 'triggeredBy',classEvents{4}, ...
	    'where', {@where_heuristic, 'position','frontal', 'howMany', 1}, ...
		'what',  {@noise_frequency_spike, 'frequencyHz',11, 'harmonics', true}}, ...			
	  {'SNR',0.001,'name','noise', 'triggeredBy', 'noise', ...
	    'where',  @where_whole_surface, ... % example of a convenience function that doesn't need params
		'what',  {@noise_pink}} ...
};

% Assemble all together
generateParamsTrain = {'id','train', ...
	'headParams', headParams, ...
	'timelineParams', timelineParams, ...
	'effectParams', effectParams, ...
	'keepVolumeData',false,  ...
	'visualize', false ...
};

% Add CSP/Bandpower pipeline
edelmanVisualize = true;
default_pipeline_edelman_he;

% Change test set id, otherwise same parameters
generateParamsTest = set_parameter(generateParamsTrain, 'id', 'test');

% Construct the simulator and run. We use same parameters in both train and test.
simulator = core_bci_simulator( ...
	simulationParams{:}, ...
	'generateParamsTrain', generateParamsTrain, ...
	'generateParamsTest', generateParamsTest, ... 
	'allPipelines', allPipelines);
simulator = simulator.run_experiment();

% summary = simulator.summarize_results();
% simulator.print_summary(summary);

