%
% Toy SSVEP example. See README.TXT
%
clear;
close all;

% setup_paths;

% Misc
set(0,'DefaultFigureColormap',feval('inferno'));

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

simulationParams = {'numIterations',2,'saveFigures',false,'id','ssvep','useCache',false, 'printSummary', true, 'saveResults', true};

% Parameters controlling the generating head
default_head;

classEvents = {'Freq1','Freq2','Freq3'};

% Parameters controlling experiment timeline generation:  when events happen
timelineParams = { 'samplingFreq', 200, 'eventList', { ...
	  	{'when', {@when_trials, 'events',classEvents, ...
		    'numTrials',18, ... 
			'trialLengthMs',4000, 'restLengthMs', 2000, ...
			'trialOrder', 'random', 'includeRest', true}}, ...	
		{'when', {@when_random, 'events',{'eyeblink'},'eventFreq',0.1}}, ...
		{'when', {@when_random, 'events',{'eyemove'},'eventFreq',0.2,'randomMaxDurationMs',2000}}, ...		
		{'when', {@when_always, 'events',{'noise'}}} ...
	} ...
};


% Parameters controlling the noise
% Defines the activity created in the cortical volume thats to be classified
effectParams = { ...
	  {'SNR',1.0,'name','signal', 'triggeredBy',classEvents{1}, ...
	    'where', {@where_heuristic, 'position','occipital', 'howMany', 1}, ...
		'what',  {@gen_ssvep, 'flickerHz',8}}, ...
	  {'SNR',1.0,'name','signal', 'triggeredBy',classEvents{2}, ...
	    'where', {@where_heuristic, 'position','occipital', 'howMany', 1}, ...
		'what',  {@gen_ssvep, 'flickerHz',10}}, ...
	  {'SNR',1.0,'name','signal', 'triggeredBy',classEvents{3}, ...
	    'where', {@where_heuristic, 'position','occipital', 'howMany', 1}, ...
		'what',  {@gen_ssvep, 'flickerHz',12}}, ...		
	  {'SNR',0.1, 'name', 'eyeblinks', 'triggeredBy', 'eyeblink', ...
  		'where', {@where_heuristic, 'position','eyes'}, ...
		'what',  {@noise_eyeblinks}}, ...	 
	  {'SNR',0.1, 'name', 'eyemoves', 'triggeredBy', 'eyemove', ...
	  	'where', {@where_heuristic, 'position','eyes'}, ...
		'what',  {@noise_eyemovement}}, ...
	  {'SNR',0.05,'name','noise', 'triggeredBy', 'noise', ...
	    'where',  @where_whole_surface, ... % example of a convenience function that doesn't need params
		'what',  {@noise_spectrally_colored, 'subType','fake', 'strength', [1.0 0.5, 0.3]}} ...
};

% Assemble all together
generateParamsTrain = {'id','train', ...
	'headParams', headParams, ...
	'timelineParams', timelineParams, ...
	'effectParams', effectParams, ...
	'keepVolumeData',false,  ...
	'visualize', false ...
};

% Params used for generating test data. Usually should resemble train data generation,
% unless you want to test the effects of the two deviating.
generateParamsTest = generateParamsTrain;
generateParamsTest = set_parameter(generateParamsTest, 'id', 'test');
generateParamsTest = set_parameter_in_context(generateParamsTest, 'events',classEvents, 'numTrials', 1);

% Specification of classification pipelines to be tested.
allPipelines = { ...
	{'name','wmn-cincotti', 'classEvents',classEvents,'processors', { ...
	  {@proc_cincotti, ...
		 'forward', {@core_head, 'filename','sabre:/models/leadfield-sphere.mat','centerAndScale',true}, ... % Use the generating leadfield (very optimistic)
		 'inverse', {@wmn_inverse}, ...
		 'ROISelection', {@roi_heuristic, 'where',{@where_heuristic, 'position','occipital','howMany',1}}, ...
		 'visualize', true}, ...
	  {@proc_lda} } }
};
% Append another alg to the list
default_pipeline_csp_bandpower;

% These will no longer have effect, clear them
clear headParams experimentParams noiseParams;

% Construct the simulator and run
simulator = core_bci_simulator(simulationParams{:}, 'allPipelines',allPipelines, ...
	'generateParamsTrain', generateParamsTrain, 'generateParamsTest', generateParamsTest);
simulator = simulator.run_experiment();

% summary = simulator.summarize_results();
% simulator.print_summary(summary);

