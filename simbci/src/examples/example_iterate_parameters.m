
%
% Shows how to iterate parameters
%
% The different instances of loop_these() in the specs cause the framework to test
% all the possible combinations.
% 
clear;
close all;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

classEvents = {'left','right'};

simulationParams = {'numIterations',5,'id','iterate_example','useCache',false};

% Parameters controlling the generating head
headParams = {'filename', 'sabre:/models/leadfield-sphere.mat', ...
		'centerAndScale', true};

% Parameters controlling experiment timeline generation:  when events happen
timelineParams = { 'samplingFreq', 200, 'eventList', { ...
	  	{'when', {@when_trials, 'events',classEvents, ...
		    'numTrials',16, ... 
			'trialLengthMs',4000, 'restLengthMs', 2000, ...
			'trialOrder', 'random', 'includeRest', true}}, ...		
		{'when', {@when_always, 'events',{'noise'}}} ...
	} ...
};
			
% Class is 'on' if there is a gaussian noise source active on the same side 
% (note: not realistic BCI, just an example that can be used with LDA classifier without feature extraction)
effectParams = { ...	
	  {'SNR', 1.0, 'name', 'signalLeft', 'triggeredBy', 'left', ...
		'what',  {@noise_gaussian, 'mean', 1.0}, ...
		'where', {@where_heuristic, 'position','leftMC'}}, ...	
	  {'SNR', 1.0, 'name', 'signalRight', 'triggeredBy', 'right', ...
		'what',  {@noise_gaussian, 'mean', 1.0}, ...
		'where', {@where_heuristic, 'position','rightMC'}}, ...			
	  {'SNR', loop_these([0.001,0.01,0.1,0.3,0.5,0.8,1.0],'noise'), 'name', 'noise', 'triggeredBy', 'noise', ...
		'what',  @noise_pink, ...
		'where', {@where_heuristic, 'position','volume'}} ...		
};

		
% Assemble all together
generateParams = {'id','artificial set', ...
	'headParams', headParams, ...
	'timelineParams', timelineParams, ...
	'effectParams',effectParams, ...
	'keepVolumeData',false,  ...
	'visualize', false ...
};

% Specification of classification pipelines to be tested.
allPipelines = { ...
	{'name','lda', 'classEvents', classEvents, 'processors', { ...
	  {@proc_lda, 'tikhonov', loop_these([0.01 0.1 0.25 0.5 0.75 1.0],'tikhonov')} } }
};

% Construct the simulator and run
simulator = core_bci_simulator(simulationParams{:},'allPipelines',allPipelines, ...
	'generateParamsTrain', generateParams, 'generateParamsTest', generateParams);
simulator = simulator.run_experiment();

% Extracting the results is a little inconvenient currently as we lack
% generic routines for that. Here we assume we know from construction 
% which result indexes correspond to which parameters.
results = simulator.get_summary();
Z = zeros(size(results,1),size(results{1,2},1));
tikhonov = []; SNR = [];
for i=1:size(Z,1)
	tikhonov(i)= results{i,1}{4};
	for j=1:size(Z,2)
		SNR(j) = results{i,2}{j,2};
		meanResults = mean(results{i,2}{j,4});
		testAccuracy = meanResults(2);
		Z(i,j) = testAccuracy;
	end
end

surf(tikhonov, SNR, Z');
xlabel('Tikhonov');ylabel('SNR');zlabel('Testset Accuracy');
title('Toy example: Noise level vs regularization for LDA');


